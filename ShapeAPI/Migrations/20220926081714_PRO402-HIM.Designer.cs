// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShapeAPI.Data;

#nullable disable

namespace ShapeAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220926081714_PRO402-HIM")]
    partial class PRO402HIM
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShapeAPI.Models.Shapes.BaseShape", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ShapeGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("ShapePositionID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ShapeGroupId");

                    b.HasIndex("ShapePositionID");

                    b.ToTable("Shapes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseShape");
                });

            modelBuilder.Entity("ShapeAPI.Models.Shapes.Position", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<double>("X")
                        .HasColumnType("double precision");

                    b.Property<double>("Y")
                        .HasColumnType("double precision");

                    b.Property<double?>("Z")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("ShapeAPI.Models.Shapes.ShapeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GroupPositionID")
                        .HasColumnType("integer");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupPositionID");

                    b.ToTable("ShapesGroups");
                });

            modelBuilder.Entity("ShapeAPI.Models.Shapes.CircleShape", b =>
                {
                    b.HasBaseType("ShapeAPI.Models.Shapes.BaseShape");

                    b.Property<double>("Diameter")
                        .HasColumnType("double precision");

                    b.HasDiscriminator().HasValue("CircleShape");
                });

            modelBuilder.Entity("ShapeAPI.Models.Shapes.RectangleShape", b =>
                {
                    b.HasBaseType("ShapeAPI.Models.Shapes.BaseShape");

                    b.Property<double>("Lenght")
                        .HasColumnType("double precision");

                    b.Property<double>("Width")
                        .HasColumnType("double precision");

                    b.HasDiscriminator().HasValue("RectangleShape");
                });

            modelBuilder.Entity("ShapeAPI.Models.Shapes.TriangleShape", b =>
                {
                    b.HasBaseType("ShapeAPI.Models.Shapes.BaseShape");

                    b.Property<double>("BaseLenght")
                        .HasColumnType("double precision");

                    b.Property<double>("SideOne")
                        .HasColumnType("double precision");

                    b.Property<double>("SideTwo")
                        .HasColumnType("double precision");

                    b.HasDiscriminator().HasValue("TriangleShape");
                });

            modelBuilder.Entity("ShapeAPI.Models.Shapes.BaseShape", b =>
                {
                    b.HasOne("ShapeAPI.Models.Shapes.ShapeGroup", null)
                        .WithMany("Shapes")
                        .HasForeignKey("ShapeGroupId");

                    b.HasOne("ShapeAPI.Models.Shapes.Position", "ShapePosition")
                        .WithMany()
                        .HasForeignKey("ShapePositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShapePosition");
                });

            modelBuilder.Entity("ShapeAPI.Models.Shapes.ShapeGroup", b =>
                {
                    b.HasOne("ShapeAPI.Models.Shapes.Position", "GroupPosition")
                        .WithMany()
                        .HasForeignKey("GroupPositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupPosition");
                });

            modelBuilder.Entity("ShapeAPI.Models.Shapes.ShapeGroup", b =>
                {
                    b.Navigation("Shapes");
                });
#pragma warning restore 612, 618
        }
    }
}
